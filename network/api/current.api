// Signature format: 4.0
package com.urlaunched.android.network.interceptors {

  public final class AccessTokenInterceptor implements okhttp3.Interceptor {
    method public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain);
    field public static final com.urlaunched.android.network.interceptors.AccessTokenInterceptor.Companion Companion;
  }

  public static final class AccessTokenInterceptor.Companion {
  }

  public final class AccessTokenInterceptorKt {
    method public static com.urlaunched.android.network.interceptors.AccessTokenInterceptor accessTokenInterceptor(kotlin.jvm.functions.Function1<? super kotlin.coroutines.Continuation<? super java.lang.String>,?> getAuthToken);
  }

  public final class PreferredLanguagesInterceptor implements okhttp3.Interceptor {
    ctor public PreferredLanguagesInterceptor(android.content.Context context, boolean singleLanguage);
    method public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain);
    field public static final com.urlaunched.android.network.interceptors.PreferredLanguagesInterceptor.Companion Companion;
  }

  public static final class PreferredLanguagesInterceptor.Companion {
  }

  public final class SignOutInterceptor implements okhttp3.Interceptor {
    method public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain);
  }

  public final class SignOutInterceptorKt {
    method public static com.urlaunched.android.network.interceptors.SignOutInterceptor signOutInterceptor(kotlin.jvm.functions.Function1<? super kotlin.coroutines.Continuation<? super kotlin.Unit>,?> onNotAuthenticated);
  }

}

package com.urlaunched.android.network.okhttp {

  public final class OkHttpInitializer {
    method public okhttp3.OkHttpClient createGeneralOkHttpClient(boolean enableLogging, optional okhttp3.OkHttpClient? okHttpClient, okhttp3.Interceptor... interceptors);
    field public static final com.urlaunched.android.network.okhttp.OkHttpInitializer INSTANCE;
  }

}

package com.urlaunched.android.network.retrofit {

  public final class RetrofitInitializer {
    method public retrofit2.Retrofit createGeneralRetrofitClient(String baseUrl, boolean enableLogging, optional okhttp3.OkHttpClient? okHttpClient, okhttp3.Interceptor![] interceptors, optional boolean isNullsExplicit);
    field public static final com.urlaunched.android.network.retrofit.RetrofitInitializer INSTANCE;
  }

}

package com.urlaunched.android.network.sockets {

  public final class ActionCableSocket {
    method public kotlinx.coroutines.flow.Flow<com.urlaunched.android.common.socket.ActionCableSocketEventMessage<kotlinx.serialization.json.JsonElement>> subscribeToChannel(String channelName, optional java.util.Map<java.lang.String,? extends kotlinx.serialization.json.JsonElement> params);
    field public static final com.urlaunched.android.network.sockets.ActionCableSocket.Companion Companion;
  }

  public static final class ActionCableSocket.Companion {
  }

  public final class ActionCableSocketInitializer {
    method public com.urlaunched.android.network.sockets.ActionCableSocket createGeneralActionCableSocket(boolean enableLogging, kotlinx.coroutines.CoroutineDispatcher coroutineDispatcher, kotlin.jvm.functions.Function1<? super kotlin.coroutines.Continuation<? super java.lang.String>,?> getSocketUrl, optional okhttp3.OkHttpClient? okHttpClient);
    field public static final com.urlaunched.android.network.sockets.ActionCableSocketInitializer INSTANCE;
  }

  public final class ActionCableStaleConnectionException extends java.lang.Exception {
    ctor public ActionCableStaleConnectionException();
  }

}

package com.urlaunched.android.network.utils {

  public final class AuthTokenWithResponseCode {
    ctor public AuthTokenWithResponseCode(String token, Integer? code);
    method public String component1();
    method public Integer? component2();
    method public com.urlaunched.android.network.utils.AuthTokenWithResponseCode copy(String token, Integer? code);
    method public Integer? getCode();
    method public String getToken();
    property public final Integer? code;
    property public final String token;
  }

  public final class ExecuteRequestKt {
    method public static suspend Object? executeOkhttpRequest(kotlin.jvm.functions.Function1<? super kotlin.coroutines.Continuation<? super okhttp3.Call>,?> request, kotlin.coroutines.Continuation<? super com.urlaunched.android.common.response.Response<kotlin.Unit>>);
    method public static suspend <T> Object? executeRequest(kotlin.jvm.functions.Function1<? super kotlin.coroutines.Continuation<? super retrofit2.Response<T>>,?> request, kotlin.coroutines.Continuation<? super com.urlaunched.android.common.response.Response<T>>);
    method public static suspend <T> Object? executeRequestAndGetAuthToken(kotlin.jvm.functions.Function1<? super kotlin.coroutines.Continuation<? super retrofit2.Response<T>>,?> request, kotlin.coroutines.Continuation<? super com.urlaunched.android.common.response.Response<kotlin.Pair<? extends T,? extends com.urlaunched.android.network.utils.AuthTokenWithResponseCode>>>);
    method public static suspend Object? executeRequestNullable(kotlin.jvm.functions.Function1<? super kotlin.coroutines.Continuation<? super retrofit2.Response<kotlin.Unit>>,?> request, kotlin.coroutines.Continuation<? super com.urlaunched.android.common.response.Response<kotlin.Unit>>);
    method public static inline <reified T> kotlinx.coroutines.flow.Flow<? extends com.urlaunched.android.common.socket.ActionCableSocketEventMessage<T>> executeSocketCallback(optional kotlinx.serialization.json.Json json, kotlin.jvm.functions.Function0<? extends kotlinx.coroutines.flow.Flow<? extends com.urlaunched.android.common.socket.ActionCableSocketEventMessage<kotlinx.serialization.json.JsonElement>>> request);
    method public static kotlinx.serialization.json.Json getNetworkJson();
    property public static final kotlinx.serialization.json.Json networkJson;
  }

  public final class SaveUserTokenKt {
    method public static suspend <T> Object? executeRequestAndTryGetAuthToken(retrofit2.Response<T>, optional String header, optional kotlin.coroutines.Continuation<? super com.urlaunched.android.common.response.Response<kotlin.Pair<? extends T,? extends com.urlaunched.android.network.utils.AuthTokenWithResponseCode>>>);
  }

  public final class UriKt {
    method public static okhttp3.RequestBody asRequestBody(android.net.Uri, android.content.ContentResolver contentResolver, optional okhttp3.MediaType? contentType);
  }

}

